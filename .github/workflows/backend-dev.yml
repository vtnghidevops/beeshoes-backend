name: Backend Development Deployment

on:
  pull_request:
    branches: [ develop ]
    types: [ closed ]
  push:
    tags:
    - 'be-dev-*'

jobs:
  build-image:
    name: Build and Deploy Backend to Development
    runs-on: ubuntu-latest
    environment: dev
    # Only run on merged PRs or tag pushes
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    outputs:
      image-tag: ${{ steps.tag.outputs.tag-only }}
      full-image: ${{ steps.tag.outputs.full-tag }}
      commit-sha: ${{ steps.short-sha.outputs.short_sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Generate short commit hash
      id: short-sha
      run: echo "short_sha=${GITHUB_SHA:0:5}" >> $GITHUB_OUTPUT

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.REGISTRY }}/${{ secrets.REPO_NAME }}
        tags: |
          type=raw,value=be-dev-${{ steps.short-sha.outputs.short_sha }}
        flavor: |
          latest=false

    - name: Extract Tag Only
      id: tag
      run: |
        # Extract just the tag part (after the last colon)
        TAG_ONLY=$(echo "${{ steps.meta.outputs.tags }}" | sed 's/.*://')
        echo "tag-only=$TAG_ONLY" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ secrets.REGISTRY }}/${{ secrets.REPO_NAME }}:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-helm-chart:
    name: Update Helm Chart Repository
    runs-on: ubuntu-latest
    environment: dev
    needs: build-image
    steps:
    - name: Update Helm Chart Repository
      run: |
        # Set image tag for deployment
        IMAGE_TAG=${{ needs.build-image.outputs.only-tag }}

        echo "Updating Helm Chart Repository with new backend image tag: ${IMAGE_TAG}"
          
          # Clone helm chart repository
          git clone https://${{ secrets.HELM_CHAR_TOKEN }}@github.com/${{ secrets.HELM_CHAR_USERNAME }}/${{ secrets.HELM_CHAR_REPO }}.git
          cd ${{ secrets.HELM_CHAR_REPO }}
          
          # Configure git
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config user.name "${{ secrets.GIT_USERNAME }}"
          
          # Update backend image tag in dev values file
          if command -v yq &> /dev/null; then
            yq eval '.backend.image.tag = "'${IMAGE_TAG}'"' -i envs/dev/dev-values.yaml
          else
            # Fallback to sed if yq not available
            sed -i "s|backend:\s*image:\s*tag:.*|backend:\n   image:\n     tag: \"${IMAGE_TAG}\"|g" envs/dev/dev-values.yaml
          fi
          
          # Commit and push changes
          git add envs/dev/dev-values.yaml
          git commit -m "feat(backend): update dev image tag to ${IMAGE_TAG} from commit ${{ needs.build-image.outputs.commit-sha }}"
          git push origin main
          
          echo "Successfully updated helm chart repository with backend image tag: ${IMAGE_TAG}"
